<?php

/**
 * @file
 * Contains dyniva_message.module.
 */

use Drupal\message\Entity\Message;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\message\MessageInterface;
use Drupal\node\NodeInterface;
use Drupal\comment\CommentInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_page_attachments_alter().
 *
 * @param array $page
 */
function dyniva_message_page_attachments_alter(array &$page) {
}

/**
 * Implements hook_theme().
 */
function dyniva_message_theme() {
  return [
    'dyniva_message_toolbar' => [
      'template' => 'notifications-toolbar',
      'variables' => [
        'variables' => NULL,
      ],
    ],
  ];
}

/**
 * Provide a form-specific alteration instead of the global hook_form_alter().
 *
 * @see hook_form_alter()
 * @see hook_form_BASE_FORM_ID_alter()
 * @see \Drupal\Core\Form\FormBuilderInterface::prepareForm()
 */
function dyniva_message_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['send_message'] = [
    '#group' => 'advanced',
    '#type' => 'details',
    '#title' => t('Send Message'),
    '#open' => true,
    '#weight' => 100,
    '#access' => \Drupal::currentUser()->hasPermission('skip send message')
  ];
  $form['send_message']['skip_send_message'] = [
    '#type' => 'checkbox',
    '#title' => t('Skip Send Message'),
    '#weight' => 100,
    '#default_value' => false,
    '#access' => \Drupal::currentUser()->hasPermission('skip send message')
  ];
  array_unshift($form['#submit'], 'dyniva_message_form_node_form_submit');
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' &&
      isset($form['actions'][$action]['#type'])&&
      $form['actions'][$action]['#type'] === 'submit'&&
      !empty($form['actions'][$action]['#submit'])) {
        array_unshift($form['actions'][$action]['#submit'], 'dyniva_message_form_node_form_submit');
      }
  }
}
/**
 * Form submit.
 *
 * @param array $form
 * @param FormStateInterface $form_state
 */
function dyniva_message_form_node_form_submit(&$form, FormStateInterface $form_state) {
  /* @var \Drupal\node\Entity\Node $entity */
  $entity = $form_state->getFormObject()->getEntity();
  $entity->skip_send_message = $form_state->getValue('skip_send_message');
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function dyniva_message_node_insert(Node $node) {
  $message = Message::create(['template' => 'content_logs', 'uid' => \Drupal::currentUser()->id()]);

  if($message->hasField('content_ref')) {
    $message->content_ref = $node;
  }
  $message->content_title = $node->label();
  $message->content_id = $node->id();
  $node_type = \Drupal::entityTypeManager()->getStorage('node_type')->load($node->bundle());
  $message->content_type = $node_type->label();
  $message->account_ref = \Drupal::currentUser()->id();
  $message->action = 'create';
  $message->comment = $node->getRevisionLogMessage();

  $message->save();

  dyniva_message_send_message($node, $message);

  $moderation_info = \Drupal::service('content_moderation.moderation_information');
  if ($moderation_info->isModeratedEntity($node)) {
    $state = $node->moderation_state->value;
    if($state == 'need_approve'){
      $moderation_message = Message::create(['template' => 'content_moderation', 'uid' => \Drupal::currentUser()->id()]);
      $moderation_message->content_title = $node->label();
      $moderation_message->content_id = $node->id();
      $moderation_message->content_type = $node_type->label();
      $moderation_message->account_ref = \Drupal::currentUser()->id();
      $moderation_message->transition = 'send_for_approve';
      $moderation_message->comment = $node->getRevisionLogMessage();
      $moderation_message->save();

      dyniva_message_send_message($node, $moderation_message);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function dyniva_message_node_update(Node $node) {
  if (\Drupal::currentUser()->isAuthenticated()) {
    $node_type = \Drupal::entityTypeManager()->getStorage('node_type')->load($node->bundle());

    if (empty($node->_deleted->value)) {
      $flag = FALSE;
      // Content moderation.
      /*
       * @var \Drupal\content_moderation\ModerationInformation $moderation_info
       */
      $moderation_info = \Drupal::service('content_moderation.moderation_information');
      if ($moderation_info->isModeratedEntity($node)) {
        /*
         * @var \Drupal\workflows\WorkflowInterface $workflow
         */
        $workflow = $moderation_info->getWorkflowForEntity($node);
        $from_state = !empty($node->original_moderation_state)?$node->original_moderation_state:$node->original->moderation_state->value;
        $to_state = $node->moderation_state->value;

        if ($from_state != $to_state) {
          try {
            $transition = $workflow->getTypePlugin()->getTransitionFromStateToState($from_state, $to_state);
          } catch(\Exception $e) {
            watchdog_exception('dyniva_message', $e);
            $transition = NULL;
          }
          if ($transition) {
            $message = Message::create(['template' => 'content_moderation', 'uid' => \Drupal::currentUser()->id()]);
            if($message->hasField('content_ref')){
              $message->content_ref = $node;
            }
            $message->content_title = $node->label();
            $message->content_id = $node->id();
            $message->content_type = $node_type->label();
            $message->account_ref = \Drupal::currentUser()->id();
            $message->transition = $transition->id();
            $message->comment = $node->getRevisionLogMessage();

            $message->save();
            dyniva_message_send_message($node, $message);

            $flag = TRUE;
          }
        }
      }

      if (!$flag) {
        // Content logs.
        $message = Message::create(['template' => 'content_logs', 'uid' => \Drupal::currentUser()->id()]);
        $query = \Drupal::entityQuery('message');
        if($message->hasField('content_ref')){
          $query->condition('content_ref', $node->id());
        }else{
          $query->condition('content_id', $node->id());
        }
        $query->condition('created', time() - 300, '>=');
        $query->condition('template', 'content_logs');
        $query->condition('action', 'update');
        $query->condition('account_ref', \Drupal::currentUser()->id());
        $query->sort('created', 'DESC');
        $result = $query->execute();

        if($message->hasField('content_ref')){
          $message->content_ref = $node;
        }
        if($message->hasField('content_vid')){
          $default_vid = \Drupal::service('content_moderation.moderation_information')
            ->getDefaultRevisionId($node->getEntityTypeId(), $node->id());
          $message->content_vid = $default_vid;
        }
        $message->content_title = $node->label();
        $message->content_id = $node->id();
        $message->content_type = $node_type->label();
        $message->account_ref = \Drupal::currentUser()->id();
        $message->action = 'update';
        $message->comment = $node->getRevisionLogMessage();

        if (!empty($result)) {
          $message_id = reset($result);
          $message = \Drupal::entityTypeManager()->getStorage('message')->load($message_id);
          $message->set('comment', $node->getRevisionLogMessage());
          $message->set('created', time());
        }
        $message->save();
        dyniva_message_send_message($node, $message);

      }

    }
    else {
      dyniva_message_node_delete($node);
    }
  }
}

/**
 * Respond to creation of a new entity.
 *
 * This hook runs once the entity has been stored. Note that hook
 * implementations may not alter the stored entity data.
 *
 * @ingroup entity_crud
 * @see hook_ENTITY_TYPE_delete()
 */
function dyniva_message_node_delete(Node $node) {
  $node_type = \Drupal::entityTypeManager()->getStorage('node_type')->load($node->bundle());

  $message = Message::create(['template' => 'content_logs', 'uid' => \Drupal::currentUser()->id()]);

  if($message->hasField('content_ref')) {
    $message->content_ref = $node;
  }
  $message->content_id = $node->id();
  $message->content_title = $node->label();
  $message->content_type = $node_type->label();
  $message->account_ref = \Drupal::currentUser()->id();
  $message->action = 'delete';
  $message->comment = $node->getRevisionLogMessage();

  $message->save();

  dyniva_message_send_message($node, $message);
}

/**
 * Respond to creation of a new entity.
 *
 * This hook runs once the entity has been stored. Note that hook
 * implementations may not alter the stored entity data.
 *
 * @ingroup entity_crud
 * @see hook_ENTITY_TYPE_insert()
 */
function dyniva_message_user_insert(User $entity) {
  $message = Message::create(['template' => 'user_logs', 'uid' => \Drupal::currentUser()->id()]);
  $message->set('user_ref', $entity);
  $message->set('account_ref', \Drupal::currentUser()->id());
  $message->set('action', 'create');
  $message->save();

  dyniva_message_send_message($entity, $message);
}

/**
 * Respond to creation of a new entity.
 *
 * This hook runs once the entity has been stored. Note that hook
 * implementations may not alter the stored entity data.
 *
 * @ingroup entity_crud
 * @see hook_ENTITY_TYPE_delete()
 */
function dyniva_message_user_delete(User $entity) {
  $message = Message::create(['template' => 'user_logs', 'uid' => \Drupal::currentUser()->id()]);
  $message->set('account_ref', \Drupal::currentUser()->id());
  $message->set('action', 'delete');
  $message->set('comment', $entity->getDisplayName());
  $message->save();

  dyniva_message_send_message($entity, $message);
}

/**
 * User update logs.
 *
 * @ingroup entity_crud
 * @see hook_ENTITY_TYPE_update()
 */
function dyniva_message_user_update(User $entity) {

  if(\Drupal::currentUser()->isAnonymous()){
    return;
  }

  $origin_roles = array_column($entity->original->roles->getValue(), 'target_id');
  $cur_roles = array_column($entity->roles->getValue(), 'target_id');

  $comment = [];
  if ($diff = array_diff($origin_roles, $cur_roles)) {
    $minus = [];
    foreach ($diff as $rid) {
      $role = user_role_load($rid);
      $minus[] = $role->label();
    }
    $comment[] = "Remove role " . implode(', ', $minus);
  }
  if ($diff = array_diff($cur_roles, $origin_roles)) {
    $adds = [];
    foreach ($diff as $rid) {
      $role = user_role_load($rid);
      $adds[] = $role->label();
    }
    $comment[] = "Add role " . implode(', ', $adds);
  }
  $comment = implode(', ', $comment);
  $message = Message::create(['template' => 'user_logs', 'uid' => \Drupal::currentUser()->id()]);
  $message->set('user_ref', $entity);
  $message->set('account_ref', \Drupal::currentUser()->id());
  $message->set('action', 'update');
  $message->set('comment', $comment);
  $message->save();

  dyniva_message_send_message($entity, $message);
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function dyniva_message_message_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $text = $entity->getText();
  if (empty($text)) {
    $text = $entity->getText('en');
  }
  foreach ($text as $index => $t) {
    $component = "partial_{$index}";
    if ($display->getComponent($component)) {
      $build[$component] = [
        '#type' => 'markup',
        '#markup' => $t,
      ];
    }
  }
}

/**
 * Implements hook_message_subscribe_get_subscribers_alter().
 *
 * @param \Drupal\message_subscribe\Subscribers\DeliveryCandidateInterface[] &$uids
 * @param array $values
 */
function dyniva_message_message_subscribe_get_subscribers_alter(array &$uids, array $values) {
  $default_notifiers = [];
  $config = \Drupal::service('config.factory')->get('dyniva_message.settings');
  if(is_array($config->get('force_notifiers'))) {
    $default_notifiers = $config->get('force_notifiers');
  }

  $disable_notifiers = [];
  if(!empty($values['subscribe_options']['disable_notifiers'])){
    $disable_notifiers = $values['subscribe_options']['disable_notifiers'];
  }

  foreach($uids as $uid => $candidate) {
    $user = user_load($uid);
    $notifiers = $default_notifiers;
    if($user->hasField('notifiers')) {
      if(!$user->notifiers->isEmpty()){
        $notifiers = array_column($user->notifiers->getValue(), 'value');
      }
    }
    $notifiers = array_diff($notifiers, $disable_notifiers);
    $notifiers = array_unique($notifiers);
    $notifiers = array_combine($notifiers, $notifiers);
    // 设置某用户所使用的信息通道
    $uids[$uid]->setNotifiers($notifiers);
  }
}
/**
 *
 * @param EntityInterface $entity
 * @param MessageInterface $message
 * @param array $notify_options
 * @param array $subscribe_options
 */
function dyniva_message_send_message(EntityInterface $entity, MessageInterface $message, $notify_options = [],  $subscribe_options = []) {
  if(!empty($entity->skip_send_message)){
    return;
  }
  $subscribe_options['entity access'] = false;
  $config = \Drupal::config('dyniva_message.settings');
  $flag = \Drupal::entityTypeManager()->getStorage('flag')->load('subscribe_message');
  if(!$flag) return;

  $debug = \Drupal::config('message_subscribe.settings')->get('debug_mode');
  if(is_array($config->get('subscribe_message_template')) && in_array($message->bundle(), $config->get('subscribe_message_template'))) {
    $uids = [];

    if (!empty($subscribe_options['uids'])) {
      $uids = $subscribe_options['uids'];
    } else {
      // We don't use module_invoke_all() is we want to retain the array keys,
      // which are the user IDs.
      foreach (\Drupal::moduleHandler()->getImplementations('dyniva_message_get_subscribers') as $module) {
        $function = $module . '_dyniva_message_get_subscribers';
        $result = $function($entity, $message);
        $debug && \Drupal::logger('dyniva_message')->debug(
            'Found @uids from @function',
            [
              '@uids' => implode(', ', array_keys($result)),
              '@function' => $function,
            ]
            );
        $uids += $result;
      }
      $debug && \Drupal::logger('dyniva_message')->debug(
          'Message flag uids: @uids',[ '@uids' => implode(', ', $uids)]
          );
      \Drupal::moduleHandler()->alter('dyniva_message_subscribers', $uids, $entity, $message);

      $debug && \Drupal::logger('dyniva_message')->debug(
          'Message flag uids after alter: @uids',[ '@uids' => implode(', ', $uids)]
          );

      $user_storage = \Drupal::entityTypeManager()->getStorage('user');
      foreach($uids as $uid) {
        // user flag message
        try {
          $user = $user_storage->load($uid);
          \Drupal::service('flag')->flag($flag, $message, $user);
        } catch (\Exception $e) {
        }
      }
    }

    if(\Drupal::moduleHandler()->moduleExists('message_subscribe')) {
      // 发送消息到订阅用户
      \Drupal::service('message_subscribe.subscribers')->sendMessage($message, $message, $notify_options, $subscribe_options);
    }
  }else{
    \Drupal::logger('dyniva_message')->warning(
        'Message template not subscribed: @bundle',
        [
          '@bundle' => $message->bundle(),
        ]
      );
  }
}

/**
 * Implements hook_dyniva_message_get_subscribers().
 */
function dyniva_message_dyniva_message_get_subscribers(EntityInterface $entity, MessageInterface $message) {
  $uids = [];

  if($entity instanceof NodeInterface){
    $uids[$entity->getOwnerId()] = $entity->getOwnerId();
  }elseif ($entity instanceof CommentInterface) {
    $uids[$entity->getOwnerId()] = $entity->getOwnerId();
    $comment_entity = $entity->getCommentedEntity();
    $uids[$comment_entity->getOwnerId()] = $comment_entity->getOwnerId();
    if($entity->hasParentComment()){
      $parent = $entity->getParentComment();
      $uids[$parent->getOwnerId()] = $parent->getOwnerId();
    }
  }

  return $uids;
}
/**
 * Implements hook_entity_revision_create().
 */
function dyniva_message_entity_revision_create(EntityInterface $revision, EntityInterface $entity) {
  if(!empty($entity->moderation_state)){
    $revision->original_moderation_state = $entity->moderation_state->value;
  }
}
